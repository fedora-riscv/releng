# -*- coding: utf-8 -*-

"""
# update_critpath - a commandline frontend for updating the critpath
#
# Copyright (C) 2014 Red Hat Inc
# Copyright (C) 2014 Pierre-Yves Chibon, Chaoyi Zha, Toshio Kuratomi,
#                    Bill Nottingham
# Authors: Pierre-Yves Chibon <pingou@pingoured.fr>
           Chaoyi Zha <summermontreal@gmail.com>
           Bill Nottingham <notting@fedoraproject.org>
           Toshio Kuratomi <toshio@fedoraproject.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# See http://www.gnu.org/copyleft/gpl.html  for the full text of the
# license.
#
# Critpath updating SOP:
# http://fedoraproject.org/wiki/Update_Critpath_SOP
#
# How to use:
#  $ python update-critpath <critpath.txt> <branch>
# for example
#  $ python update-critpath critpath.txt f20
#
"""

from pkgdb2client import PkgDB, PkgDBException
import pkgdb2client
import argparse
import logging


pkgdbclient = PkgDB('https://admin.fedoraproject.org/pkgdb',
                    login_callback=pkgdb2client.ask_password)

# Initial simple logging stuff
logging.basicConfig()
PKGDBLOG = logging.getLogger("pkgdb2client")
LOG = logging.getLogger("update_critpath")


def _get_active_branch(packagename=None):
    ''' Return a list of the active branch for a specific package or simply
    all the active branches if no package is specified.
    '''
    LOG.debug("Retrieving all the active branches")
    branches = []
    if packagename:
        output = pkgdbclient.get_package(packagename)
        for pkg in output['packages']:
            if pkg['collection']['status'] != 'EOL':
                branches.append(pkg['collection']['branchname'])
    else:
        output = pkgdbclient.get_collections(
            clt_status=['Active', 'Under Development'])
        for collect in output['collections']:
            if collect['status'] == 'EOL':
                continue
            branches.append(collect['branchname'])
    return branches


def setup_parser():
    '''
    Set up argparse
    '''
    parser = argparse.ArgumentParser(prog="update_critpath")
    # General connection options
    parser.add_argument('--user', dest="username",
                        help="FAS username")
    parser.add_argument('--password', dest="password",
                        help="FAS password (if not provided, will be asked "
                        "later)")
    parser.add_argument('--debug', action='store_true',
                        help="Outputs bunches of debugging info")
    parser.add_argument('--test', action='store_true',
                        help="Uses a test instance instead of the real pkgdb.")

    parser.add_argument(
        'txtlist',
        help="Filename containing list of packages to critpath")
    parser.add_argument(
        'branch', default='master',
        help="Branch of the package to add to critpath (default: 'master')")

    return parser


def list_critpath(branches):
    ''' Return the list of packages flagged as critpatch in the specified
    branches.

    :arg branches: one or more branches used to restrict the list of packages
        returned.
    :type branches: str or list
    :return: a list of package names
    :rtype: list
    '''
    if isinstance(branches, basestring):
        branches = [branches]

    args = {
        'branches': branches,
        'format': 'json',
    }
    output = pkgdbclient.handle_api_call('/critpath', params=args)

    pkgs = set()
    if output:
        for branch in branches:
            if branch in output['pkgs']:
                pkgs.update(output['pkgs'][branch])

    return pkgs


def update_critpath(current_critpath, new_critpath, branch):
    ''' Change critpath status of packages in PkgDB

    :arg current_critpath: a set listing all the packages that currently have
        the critpath package
    '''
    # Remove the critpath flag to the package that should not have it

    new_no = current_critpath - new_critpath
    for pkg in new_no:
        try:
            pkgdbclient.update_critpath(pkg, branch, False)
        except PkgDBException, err:
            LOG.debug('PkgDBException')
            print '{0}: {1}'.format(pkg, err)

    new_yes = new_critpath - current_critpath
    for pkg in new_yes:
        try:
            pkgdbclient.update_critpath(pkg, branch, True)
        except PkgDBException, err:
            LOG.debug('PkgDBException')
            print '{0}: {1}'.format(pkg, err)


def main():
    ''' Main function '''
    # Set up parser for global args
    parser = setup_parser()
    # Parse the commandline
    try:
        arg = parser.parse_args()
    except argparse.ArgumentTypeError, err:
        print "\nError: {0}".format(err)
        return 2

    if arg.debug:
        LOG.setLevel(logging.DEBUG)
        PKGDBLOG.setLevel(logging.DEBUG)

    if arg.test:
        global pkgdbclient
        print "Testing environment"
        pkgdbclient = PkgDB(
            'https://admin.stg.fedoraproject.org/pkgdb',
            login_callback=pkgdb2client.ask_password,
            insecure=True)

    return_code = 0

    if arg.password:
        pkgdbclient.password = arg.password
    if arg.username:
        pkgdbclient.username = arg.username

    current_critpath = list_critpath(arg.branch)
    new_critpath = []
    with open(arg.txtlist) as f:
        for line in f.readlines():
            new_critpath.append(line.strip())

    try:
        update_critpath(set(current_critpath), set(new_critpath), arg.branch)
    except KeyboardInterrupt:
        print "\nInterrupted by user."
        return_code = 1
    except Exception, err:
        print 'Error: {0}'.format(err)
        logging.exception("Generic error catched:")
        return_code = 2

    return return_code


if __name__ == '__main__':
    main()
