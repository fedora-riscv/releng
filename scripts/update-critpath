# -*- coding: utf-8 -*-

"""
# update_critpath - a commandline frontend for updating the critpath
#
# Copyright (C) 2014 Red Hat Inc
# Copyright (C) 2014 Pierre-Yves Chibon, Chaoyi Zha, Toshio Kuratomi, Bill Nottingham
# Authors: Pierre-Yves Chibon <pingou@pingoured.fr>
           Chaoyi Zha <summermontreal@gmail.com>
           Bill Nottingham <notting@fedoraproject.org>
           Toshio Kuratomi <toshio@fedoraproject.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
# See http://www.gnu.org/copyleft/gpl.html  for the full text of the
# license.
#
# To use update_critpath, you must place this script within the folder of packagedb-cli
# It is a dependency, and you cannot run update_critpath wihtout packagedb-cli
#
# Critpath updating SOP:
# http://fedoraproject.org/wiki/Update_Critpath_SOP
#
# How to use:
# python update-critpath critpath <branch> <critpath.txt> <status (True/False)>
# for example
# python update-critpath critpath f20 critpath.txt True
#
"""

from fedora.client import (AccountSystem, AppError, ServerError)
from bugzilla.rhbugzilla import RHBugzilla
from pkgdb2client import PkgDB, PkgDBException, __version__
import pkgdb2client
import argparse
import logging
import koji


KOJI_HUB = 'http://koji.fedoraproject.org/kojihub'
RH_BZ_API = 'https://bugzilla.redhat.com/xmlrpc.cgi'

pkgdbclient = PkgDB('https://admin.fedoraproject.org/pkgdb',
                    login_callback=pkgdb2client.ask_password)
fasclient = AccountSystem('https://admin.fedoraproject.org/accounts')

# Initial simple logging stuff
logging.basicConfig()
PKGDBLOG = logging.getLogger("pkgdb2client")
LOG = logging.getLogger("pkgdb-cli")

def _get_active_branch(packagename=None):
    ''' Return a list of the active branch for a specific package or simply
    all the active branches if no package is specified.
    '''
    LOG.debug("Retrieving all the active branches")
    branches = []
    if packagename:
        output = pkgdbclient.get_package(packagename)
        for pkg in output['packages']:
            if pkg['collection']['status'] != 'EOL':
                branches.append(pkg['collection']['branchname'])
    else:
        output = pkgdbclient.get_collections(
            clt_status=['Active', 'Under Development'])
        for collect in output['collections']:
            if collect['status'] == 'EOL':
                continue
            branches.append(collect['branchname'])
    return branches


def setup_parser():
    '''
    Set up argparse
    '''
    parser = argparse.ArgumentParser(prog="pkgdb-cli")
    # General connection options
    parser.add_argument('--user', dest="username",
                        help="FAS username")
    parser.add_argument('--password', dest="password",
                        help="FAS password (if not provided, will be asked "
                        "later)")
    parser.add_argument('--nocolor', action='store_true',
                        help="Removes color from output")
    parser.add_argument('--verbose', action='store_true',
                        help="Gives more info about what's going on")
    parser.add_argument('--debug', action='store_true',
                        help="Outputs bunches of debugging info")
    parser.add_argument('--test', action='store_true',
                        help="Uses a test instance instead of the real pkgdb.")
    parser.add_argument('--version', action='version',
                        version='pkgdb-cli %s' % (__version__))

    parser.add_argument(
        'branch', default='master', nargs="?",
        help="Branch of the package to add to critpath "
        "(default: 'master', can be: 'all')")
    parser.add_argument(
        'txtlist',
        help="Filename containing list of packages to critpath")
    parser.add_argument(
        'status', default=True,
        help="To add or remove from critpath "
        "(default: 'True', can be: 'False'")
    parser.set_defaults(func=do_critpath)


    return parser

def do_critpath(args):
    ''' Change critpath status on package in PkgDB

    '''

    branch = args.branch
    critpath = args.status
    txtlist = args.txtlist
    lpackages = []
    try:
        with open(txtlist) as f:
            lpackages = f.readlines() # Read each line of txtlist into a list
    except:
        print "Error: File {0} not found.".format(txtlist)

    for package in lpackages:
        # Loop through each entry, and update the critpath appropriately
        spackage = package.strip()
        pkgdbclient.update_critpath(
            spackage,
            branch = branch,
            critpath = critpath)
        print "Setting {spackage}'s critpath status to {critpath}...".format(spackage=spackage, critpath=critpath)
    print "Done."



def main():
    ''' Main function '''
    # Set up parser for global args
    parser = setup_parser()
    # Parse the commandline
    try:
        arg = parser.parse_args()
    except argparse.ArgumentTypeError, err:
        print "\nError: {0}".format(err)
        return 2

    if arg.debug:
        LOG.setLevel(logging.DEBUG)
        PKGDBLOG.setLevel(logging.DEBUG)
    elif arg.verbose:
        LOG.setLevel(logging.INFO)

    if arg.test:
        global fasclient, pkgdbclient
        print "Testing environment"
        fasclient = AccountSystem(
            'https://admin.stg.fedoraproject.org/accounts',
            insecure=True)
        pkgdbclient = PkgDB(
            'https://admin.stg.fedoraproject.org/pkgdb',
            login_callback=pkgdb2client.ask_password,
            insecure=True)

    return_code = 0

    if arg.password:
        pkgdbclient.password = arg.password
    if arg.username:
        pkgdbclient.username = arg.username

    try:
        arg.func(arg)
    except KeyboardInterrupt:
        print "\nInterrupted by user."
        return_code = 1
    except ServerError, err:
        LOG.debug('ServerError')
        print '{0}'.format(err)
        return_code = 3
    except ActionError, err:
        # Note: If this error is raised, the most probable cause is "Nothing to update" (already critpathed), or some of the values are wrong
        LOG.debug('ActionError')
        print '{0}'.format(err.message)
        return_code = 7
    except AppError, err:
        LOG.debug('AppError')
        print '{0}: {1}'.format(err.name, err.message)
        return_code = 4
    except PkgDBException, err:
        LOG.debug('PkgDBException')
        print '{0}'.format(err)
        return_code = 8
    except ValueError, err:
        print 'Error: {0}'.format(err)
        print 'Did you log in?'
        return_code = 6
    except Exception, err:
        print 'Error: {0}'.format(err)
        logging.exception("Generic error catched:")
        return_code = 5

    return return_code


if __name__ == '__main__':
    main()
