#!/usr/bin/python
#
# Copyright 2011, Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Authors: Bill Nottingham <notting@redhat.com>

import argparse
import getpass
import os
import string
import sys

import fedora_cert
from fedora.client import pkgdb

def get_branches(p):
	ret = []
	try:
		list = p.get_collection_list(eol = False)
		for item in list:
			ret.append(item[0].branchname)
	except:
		pass
	return ret

def read_package_file(filename):
	ret = []
	f = open(filename,'r')
	data = f.readlines()
	f.close()
	data = map(string.strip, data)
	for item in data:
		if len(item) > 0:
			ret.append(item)
	return ret

def setup_args():
	usage = "\nupdate-critpath <branch> <file>"
	parser = argparse.ArgumentParser(
		usage="\nupdate_critpath <branch> <file>")
	parser.add_argument('branch')
	parser.add_argument('file')
	parser.add_argument('--user', dest="username", help="FAS username")
	parser.add_argument('--password', dest="password", help="FAS password")
	return parser

def main():
	parser = setup_args()
	args = parser.parse_args()
	packages = read_package_file(args.file)
	p = pkgdb.PackageDB()
	branches = get_branches(p)
	if args.branch not in branches:
		print "%s not a valid branch. Valid branches: %s." % (args.branch, branches)
		sys.exit(1)
	if not packages:
		sys.exit(0)
	if args.username:
		p.username = args.username
	else:
		try:
			p.username = fedora_cert.read_user_cert()
		except:
			p.username = raw_input('FAS username: ')
	if args.password:
		p.password = args.password
	else:
		p.password = getpass.getpass()
	p.set_critpath(packages, True, [args.branch], True)

if __name__ == '__main__':
	main()
