#!/bin/bash

# Copyright (C) 2013 Red Hat Inc.
# SPDX-License-Identifier:	GPL-2.0+

# runs currently on releng03.phx2.fedoraproject.org

DATE=$1
ARCH=$2

BRANCHED=rawhide
DIST=rawhide

TREEPREFIX="/pub/fedora/linux"
MASHDIR="/mnt/koji/mash/rawhide-$DATE"
EXPANDARCH=""
DEPOPTS=""
MASHOPTS=""
MOCKCONFIG=fedora-rawhide-compose-i386
TOMAIL="devel@lists.fedoraproject.org test@lists.fedoraproject.org"
SUBJECT='rawhide report: '$DATE' changes'
FROM="Fedora Rawhide Report <rawhide@fedoraproject.org>"
RSYNCPREFIX="sudo -u ftpsync"
[ -n "$ARCH" ] && {
TREEPREFIX="/mnt/koji/tree"
EXPANDARCH="-$ARCH"
DEPOPTS="--nomail"
MASHOPTS="-c /etc/mash/mash.$ARCH.conf"
TOMAIL="secondary@lists.fedoraproject.org $ARCH@lists.fedoraproject.org"
SUBJECT=$ARCH' rawhide report: '$DATE' changes'
FROM="$(echo $ARCH) Fedora Rawhide Report <rawhide@fedoraproject.org>"
RSYNCPREFIX=""
}

[ "$ARCH" == "ppc" ] && {
MOCKCONFIG=fedora-rawhide-compose-ppc64

}
 
RSYNC_OPTS="-rlptDHhv --delay-updates"
DESTPATH="$TREEPREFIX/development/$BRANCHED/"


[ -z "$DATE" ] && {
	echo "usage: buildrawhide <date>"
	exit 1
}

TMPDIR=`mktemp -d /tmp/rawhide.$DATE.XXXX`
logdir="/mnt/koji/mash/rawhide-$DATE/logs"
mkdir -p "${logdir}"


echo "Compose started at $(date --utc)" > "$logdir/start"



logfile="${logdir}/buildrawhide.log"
touch "${logfile}"
function log()
{
	message="${1}"
	echo "$(date --utc) buildrawhide: ${message}" >> "${logfile}"
}

log "started"
# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"start\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.start \
    --json-input

log "git clone of comps started"
pushd $TMPDIR
git clone git://git.fedorahosted.org/comps.git && {
	pushd comps
	make comps-rawhide
	cp comps-rawhide.xml $logdir/
	popd
}
popd
log "git clone of comps finished"

[ -f $logdir/comps-rawhide.xml ] || exit 1

log "mock init"
mock -r $MOCKCONFIG --uniqueext=$DATE --init
log "mock install base packages"
mock -r $MOCKCONFIG --uniqueext=$DATE --no-clean --install koji yum createrepo cvs make intltool findutils mash yum-utils rsync repoview hardlink
# Copy in the hosts file so that we get the right address for koji
log "mock setup /etc/hosts"
mock -r $MOCKCONFIG --uniqueext=$DATE --copyin /etc/hosts /etc/hosts >/dev/null 2>&1 # this reports to fail, but actually works

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"start\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.mash.start \
    --json-input

log "starting mash"
# Drop privs here so that we run as the masher UID
mock -r $MOCKCONFIG --uniqueext=$DATE --unpriv --chroot "mash $MASHOPTS -p $TREEPREFIX/development/rawhide -o /mnt/koji/mash/rawhide-$DATE --compsfile $logdir/comps-rawhide.xml rawhide$EXPANDARCH > $logdir/mash.log 2>&1" || exit 1

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"done\", \"branch\": \"rawhide\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.mash.complete \
    --json-input

log "finished mash"
log "starting hardlink"
# hardlink the noarch deltarpms between x86_64 and i386 
mock -r $MOCKCONFIG --uniqueext=$DATE --chroot "hardlink -v -c /mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH/*/os/drpms/"
log "finished hardlink"

log "starting repodiff"
mock -r $MOCKCONFIG --uniqueext=$DATE --chroot "rm -f /var/lib/rpm/__db*"
mock -r $MOCKCONFIG --uniqueext=$DATE --unpriv --chroot "/usr/bin/repodiff -s -q --new=file:///mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH/source/SRPMS --old=file://$TREEPREFIX/development/rawhide/source/SRPMS > $logdir/repodiff"
log "finished repodiff"

log "starting spam-o-matic"
mock -r $MOCKCONFIG --uniqueext=$DATE --unpriv --chroot "/usr/share/mash/spam-o-matic $DEPOPTS /mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH >$logdir/depcheck" &
log "finished spam-o-matic"

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"start\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.pungify.start \
    --json-input

log "starting critppath generation"
#only run critpath on primary arch
[ -z "$ARCH" ] && {
./scripts/critpath.py --url file:///mnt/koji/mash/$DIST-$DATE/$BRANCHED/ -o /mnt/koji/mash/$DIST-$DATE/logs/critpath.txt branched &> /mnt/koji/mash/$DIST-$DATE/logs/critpath.log
log "finished critppath generation"

log "starting pungify"
for basearch in armhfp i386 x86_64 ; do
    HOST=$(koji list-hosts --quiet --enabled --ready --arch=$basearch  --channel compose | sed 's|/| |g' | sort -g -k4 -k5r | awk -F ' ' '{ print $1 ; exit }')
    ./scripts/pungify $DATE $BRANCHED $basearch $HOST $DIST > /mnt/koji/mash/$DIST-$DATE/logs/pungify-$basearch.log 2>&1 &
    done
}
wait
log "finished pungify"

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"done\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.pungify.complete \
    --json-input

log "starting build_composeinfo"
echo "Running build_composeinfo"
./scripts/build_composeinfo --name Fedora-${BRANCHED}-${DATE} /mnt/koji/mash/$DIST-$DATE/$BRANCHED/

wait
log "finished build_composeinfo"
log "starting mock clean"
mock -r $MOCKCONFIG --uniqueext=$DATE --clean
log "finished mock clean"

[ -n "$NOSYNC" ] && exit $rc

log "started linking finished tree"
# Create a rawhide link in /mnt/koji/mash, deltas et al depend on this
rm /mnt/koji/mash/$DIST
ln -s /mnt/koji/mash/$DIST-$DATE/$BRANCHED$EXPANDARCH/ /mnt/koji/mash/$DIST
log "finished linking finished tree"

echo "Compose finished at $(date --utc)" >> $logdir/finish
echo >> $logdir/finish
log "finished compose"

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"start\", \"branch\": \"rawhide\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.rsync.start \
    --json-input

log "started rawhide compose sync"
# data
$RSYNCPREFIX /usr/bin/rsync $RSYNC_OPTS --exclude repodata/ /mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH/ $DESTPATH
# repodata & cleanup
$RSYNCPREFIX /usr/bin/rsync $RSYNC_OPTS --delete --delete-after /mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH/ $DESTPATH
log "finished rawhide compose sync"

if [ "$?" = "0" ]; then
   export mail=0
fi

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"done\", \"branch\": \"rawhide\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.rsync.complete \
    --json-input

log "starting sending rawhide email report"
if [ "$mail" = "0" ]; then
    for tomail in "$(echo $TOMAIL)" ; do
         cat $logdir/start $logdir/depcheck $logdir/repodiff $logdir/finish |  mutt -e "set from=\"$FROM\"" -e 'set envelope_from=yes' -s "$SUBJECT" $tomail
    done
fi
log "finished sending rawhide email report"

[ -z "$ARCH" ] && {
# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"start\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.image.start \
    --json-input

log "started checking out spin-kickstarts"
pushd ../
git clone git://git.fedorahosted.org/git/spin-kickstarts/
pushd spin-kickstarts
#git checkout f$BRANCHED
log "finished checking out spin-kickstarts"
log "started building live/arm/cloud images"
../releng/scripts/build-livecds $BRANCHED $DATE $BRANCHED
../releng/scripts/build-arm-images $BRANCHED $DATE $BRANCHED
../releng/scripts/build-cloud-images $BRANCHED $DATE $BRANCHED
log "finished starting building live/arm/cloud images"
popd
popd

# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"done\", \"branch\": \"$BRANCHED\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.image.complete \
    --json-input
}

for koji in arm ppc s390
do
  if [ "$koji" = "arm" ]; then
     arches=aarch64
  elif [ "$koji" = "ppc" ]; then
     arches=ppc64,ppc64le
  elif [ "$koji" = "s390" ]; then
     arches=s390,s390x
  fi
  scripts/srpm-excluded-arch.py -a $arches --path /mnt/koji/mash/rawhide-$DATE/rawhide$EXPANDARCH/source/SRPMS/*/ >$logdir/excludearch-$koji.log
done


# Emit a message using bodhi's cert (since we should be running as "masher").
echo "{\"log\": \"done\", \"branch\": \"rawhide\", \"arch\": \"$ARCH\"}" | fedmsg-logger \
    --cert-prefix bodhi \
    --modname compose \
    --topic rawhide.complete \
    --json-input

exit 0
