#!/bin/bash

umask 002

# Copyright (C) 2015 Red Hat, Inc.
# SPDX-License-Identifier:      GPL-2.0+

VERSION=$1
COMPOSE=$2
DATE=$3
BRANCH=$(echo $VERSION|sed -e 's|_.*||g')
DESTDIR=/srv/pungi/$VERSION-$DATE/
FINALDEST=/mnt/fedora_koji/compose/$VERSION-$DATE/
KICKSTARTS=/srv/pungi/spin-kickstarts/
ATOMIC=/srv/pungi/fedora-atomic/
ATOMICDEST=/srv/pungi/atomic/
MIRRORDEST=/pub/alt/atomic/testing/$VERSION-$DATE/
SHORTCOMPOSE=$(echo $COMPOSE|sed -e 's|_RC||g')
SHORTVERSION=$VERSION
[ -z "$COMPOSE" ] && {
        SHORTVERSION=$(echo $VERSION|sed -e 's|_T.*||')
        SHORTCOMPOSE=$(echo $VERSION|sed -e 's|.*_||g')
}

FEDMSG_MODNAME="compose"
FEDMSG_CERTPREFIX="bodhi"
fedmsg_json_start=$(printf '{"log": "start", "branch": "%s"}' "${BRANCH}")
fedmsg_json_done=$(printf '{"log": "done", "branch": "%s"}' "${BRANCH}")
. ./scripts/fedmsg-functions.sh

FULLPATH=$(pwd)
pushd $KICKSTARTS
git reset --hard
git checkout f$VERSION 
git pull --rebase

send_fedmsg ${fedmsg_json_start} ${BRANCH} compose.make-updates.start
send_fedmsg ${fedmsg_json_start} ${BRANCH} compose.cloudimg-build.start
$FULLPATH/build-cloud-images "$VERSION" "$DATE" "$BRANCH" "$COMPOSE"
popd

# use the latest updated kickstarts
pushd $ATOMIC
git reset --hard
git checkout f$VERSION 
git pull --rebase

mock -r fedora-$VERSION-compose-x86_64 --init || exit 1
mock -r fedora-$VERSION-compose-x86_64 --install lorax rpm-ostree || exit 1
mock -r fedora-$VERSION-compose-x86_64 --shell "mkdir -p ${DESTDIR}/Cloud_Atomic/x86_64/iso; mkdir -p ${DESTDIR}/logs"

send_fedmsg ${fedmsg_json_start} ${BRANCH} compose.atomic-lorax.start
mock -r fedora-$VERSION-compose-x86_64 --shell "lorax --nomacboot -p Fedora -v ${SHORTVERSION} -r ${SHORTCOMPOSE} \
                                                 -s http://infrastructure.fedoraproject.org/pub/fedora/linux/releases/$VERSION/Everything/x86_64/os/ \
                                                 -i fedora-productimg-atomic \
                                                 -t Cloud_Atomic \
                                                 --tmp /tmp/ \
                                                 --logfile=${DESTDIR}/logs/atomic \
                                                 --add-template /srv/pungi/spin-kickstarts/atomic-installer/lorax-configure-repo.tmpl \
                                                 --add-template-var=ostree_osname=fedora-atomic \
                                                 --add-arch-template-var=ostree_repo=https://kojipkgs.fedoraproject.org/mash/atomic/$VERSION/ \
                                                 --add-template-var=ostree_ref=fedora-atomic/f${VERSION}/x86_64/docker-host \
                                                 --add-arch-template /srv/pungi/spin-kickstarts/atomic-installer/lorax-embed-repo.tmpl \
                                                 --add-arch-template-var=ostree_osname=fedora-atomic \
                                                 --add-arch-template-var=ostree_ref=fedora-atomic/f${VERSION}/x86_64/docker-host \
                                                 --isfinal \
                                                 ${DESTDIR}/Cloud_Atomic/x86_64/os/ " || exit 1
mock -r fedora-$VERSION-compose-x86_64 --shell "cp -l ${DESTDIR}/Cloud_Atomic/x86_64/os/images/boot.iso ${DESTDIR}/Cloud_Atomic/x86_64/iso/Fedora-Cloud_Atomic-x86_64-${VERSION}-${DATE}.iso" || exit 1
mock -r fedora-$VERSION-compose-x86_64 --shell "pushd ${DESTDIR}/Cloud_Atomic/x86_64/iso/ ;sha256sum -b --tag *iso >Fedora-Cloud_Atomic-${VERSION}-x86_64-CHECKSUM; popd" || exit 1
send_fedmsg ${fedmsg_json_done} ${BRANCH} compose.atomic-lorax.done

popd

while true
do
  if [ $(koji list-tasks --mine|grep OPEN|grep -e image -e livecd -e appliance|wc -l) -ne 0 ]
  then
    echo "image, appliance or livecd tasks running, waiting 2 minutes"
    sleep 120
  else
    break
  fi
done
send_fedmsg ${fedmsg_json_done} ${BRANCH} compose.cloudimg-build.done

sg releng "mkdir -p $FINALDEST"
pushd $FINALDEST/
sg releng "mkdir -p Cloud-Images/i386/Images Cloud-Images/x86_64/Images Docker/x86_64"
popd


USER=$(whoami)
# stage images
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Cloud*$VERSION-$DATE\.i386.raw.xz $FINALDEST/Cloud-Images/i386/Images/"
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Cloud*$VERSION-$DATE\.i386.qcow2 $FINALDEST/Cloud-Images/i386/Images/"
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Cloud*$VERSION-$DATE\.x86_64.raw.xz $FINALDEST/Cloud-Images/x86_64/Images/"
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Cloud*$VERSION-$DATE\.x86_64.qcow2 $FINALDEST/Cloud-Images/x86_64/Images/"
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Cloud*$VERSION-$DATE\.x86_64.*.box $FINALDEST/Cloud-Images/x86_64/Images/"
sg releng "sudo /usr/bin/cp -l /mnt/fedora_koji/koji/scratch/$USER/task_*/Fedora-Docker*-$VERSION-$DATE*tar.xz $FINALDEST//Docker/x86_64/"



send_fedmsg ${fedmsg_json_start} ${BRANCH} compose.cloudimg-checksum.start
pushd $FINALDEST/Cloud-Images
for arch in i386 x86_64; do pushd $arch/Images; sg releng "sha256sum --tag -b *qcow2 *raw.xz *box>  Fedora-Cloud-Images-$arch-$VERSION-CHECKSUM"; popd; done
popd

pushd $FINALDEST/Docker/x86_64
sg releng "sha256sum --tag -b *tar.xz>  Fedora-Docker-x86_64-$VERSION-CHECKSUM"
popd
send_fedmsg ${fedmsg_json_done} ${BRANCH} compose.cloudimg-checksum.done



send_fedmsg ${fedmsg_json_start} ${BRANCH} compose.cloudimg-staging.start
# stage the composed tree to final locateion
sg releng "mkdir $MIRRORDEST"
sg releng "chmod 700 $MIRRORDEST"
for type in Cloud_Atomic Docker Cloud-Images; do sg releng "rsync -avhH $FINALDEST/$type/ $MIRRORDEST/$type/"; done
sg releng "chmod 755 $MIRRORDEST"
send_fedmsg ${fedmsg_json_done} ${BRANCH} compose.cloudimg-staging.done

send_fedmsg ${fedmsg_json_done} ${BRANCH} compose.make-updates.done
