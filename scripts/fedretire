#!/usr/bin/python -tt
# vim: fileencoding=utf8
# SPDX-License-Identifier: GPL-2.0+

import argparse
import os
import shutil
import subprocess
import tempfile


def retire(pkg, branch, reason, dryrun=False):
    def run(cmd, cwd):
        if dryrun:
            print(cmd)
        else:
            return subprocess.check_call(cmd, cwd=cwd)

    tempdir = tempfile.mkdtemp(pkg, branch)
    try:
        cmd = ["fedpkg", "clone", pkg]
        run(cmd, tempdir)

        pkgdir = os.path.join(tempdir, pkg)

        cmd = ["fedpkg", "switch-branch", branch]
        run(cmd, pkgdir)

        cmd = ["fedpkg", "retire", reason]
        run(cmd, pkgdir)
    finally:
        shutil.rmtree(tempdir)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Helper to retire packages")
    parser.add_argument("--branch", default="master", nargs="*",
                        choices=["master", "f22", "f21", "f20", "epel7", "el6",
                                 "el5"])
    parser.add_argument("--reasonfile", default=None)
    parser.add_argument("--reason", default=None)
    parser.add_argument("pkg", nargs="+")
    args = parser.parse_args()

    if args.reasonfile is None and args.reason is None:
        reasonfile = tempfile.NamedTemporaryFile(delete=False)
        filename = reasonfile.name
        childpid = os.fork()
        if childpid == 0:
            os.execlp("vim", "vim", filename)
        else:
            os.waitpid(childpid, 0)
        reason = reasonfile.read()
        os.unlink(filename)
    elif args.reasonfile is not None:
        with open(args.reasonfile, "rb") as reasonfile:
            reason = reasonfile.read()
    else:
        reason = args.reason
        if reason[-1] != "\n":
            reason += "\n"

    errors = {}
    for pkg in args.pkg:
        retired = False
        for branch in args.branch:
            for _ in xrange(0, 3):
                try:
                    retire(pkg, branch, reason, dryrun=False)
                    retired = True
                    break
                except subprocess.CalledProcessError:
                    pass
            if not retired:
                errors.setdefault(branch, []).append(pkg)

    if errors:
        print("Errors: " + repr(errors))
