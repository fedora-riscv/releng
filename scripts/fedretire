#!/usr/bin/python -tt
# vim: fileencoding=utf8
# SPDX-License-Identifier: GPL-2.0+

import argparse
import datetime
import os
import shutil
import subprocess
import tempfile

import requests
import pdc_client

NAMESPACES = {
    'rpms': 'rpm',
    'modules': 'module',
    'container': 'container',
}

RETIRED = 'Retired'
ORPHANED = 'Orphaned'
ACTIVE = 'Active'

# This is a user in pagure.
ORPHAN_UID = 'orphan'

PAGURE_URL = 'https://src.fedoraproject.org/pagure'

ORPHAN_REASON = """Retired orphaned package, because it was orphaned for
more than six weeks.
"""

ORPHAN_DEPENDENT_REASON = """Retired because it depends on {package}, which was
retired, because it was orphaned for more than six weeks.
"""

ORPHAN_NOT_FOUND = """Retired orphaned package, because it was not built or
published."""

BRANCH_HIERARCHY = {
    "master": "",
    "f26": "master",
    "f25": "f26",
    "f24": "f25",
    "epel7": "",
    "el6": ""
}

def get_status(name, branch="master", namespace='rpms'):
    # First, check to see if it is retired.
    # PDCClient pulls connection information from /etc/pdc.d/
    # develop=True means: don't authenticate.
    pdc = pdc_client.PDCClient('fedora', develop=True)
    kwargs = dict(global_component=name, name=branch, type=NAMESPACES[namespace])
    results = pdc.get_paged(pdc['component-branches'], **kwargs)
    try:
        pdc_branch = results.next()
    except StopIteration:
        raise ValueError("branch %r of package %r does not exist in PDC." % (
            branch, name))
    retired = not pdc_branch['active']
    if retired:
        return RETIRED

    # OK, if it isn't retired, it *might* be orphaned.. but we have to check
    # pagure for that.
    kwargs = dict(name=name, namespace=namespace)
    response = requests.get(PAGURE_URL + "/api/0/packages", params=kwargs)
    if not bool(response):
        raise IOError("%r gave a %r" % (response.request.url, response))
    data = response.json()
    if not data['projects']:
        raise ValueError("%r found no pagure repos" % (response.request.url))
    people = set()
    for kind in ('access_groups', 'access_users'):
        people.extend(data[kind].values())

    if len(people) == 0:
        raise ValueError("%r has no people.. not even the orphan user.  "
                         "Should not be possible." % response.request.url)

    # See if 'orphan' is in there
    if ORPHAN_UID in people:
        # Sanity check
        if len(people) > 1:
            raise ValueError("%r is both orphaned and not." % response.request.url)
        return ORPHANED

    # If it is neither Retired nor Orphaned, then it must be active.
    return ACTIVE


def check_status(name, branch, status=ORPHANED, dep_status=RETIRED):
    current_status = get_status(name, branch)
    if current_status != status:
        return False

    branches = []
    while True:
        nextbranch = BRANCH_HIERARCHY.get(branch)
        if nextbranch:
            branches.append(nextbranch)
            branch = nextbranch
        else:
            break
    for branch in branches:
        current_status = get_status(name, branch)
        if current_status != dep_status:
            return False
    return True


def retire(pkg, branch, reason, dryrun=False):
    def run(cmd, cwd):
        if dryrun:
            print(cmd)
        else:
            return subprocess.check_call(cmd, cwd=cwd)

    tempdir = tempfile.mkdtemp(pkg, branch)
    try:
        cmd = ["fedpkg", "clone", pkg]
        run(cmd, tempdir)

        pkgdir = os.path.join(tempdir, pkg)

        cmd = ["fedpkg", "switch-branch", branch]
        run(cmd, pkgdir)

        cmd = ["fedpkg", "retire", reason]
        run(cmd, pkgdir)
    finally:
        shutil.rmtree(tempdir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Helper to retire packages")
    parser.add_argument("--branch", default=["master"], nargs="*",
                        choices=BRANCH_HIERARCHY.keys())
    parser.add_argument("--dry-run", default=False, action="store_true")
    parser.add_argument("--reasonfile", default=None)
    parser.add_argument("--reason", default=None)
    parser.add_argument("--orphan", default=False, action="store_true",
                        help="Use reason for orphaned packages")
    parser.add_argument(
        "--orphan-dependent", default=None,
        help="Use reason for package depending on orphaned package")
    parser.add_argument("--notfound-orphan", default=False,
                        action="store_true",
                        help="Use reason for unbuilt orphaned package")
    parser.add_argument("pkg", nargs="+")
    args = parser.parse_args()

    if args.reasonfile is not None:
        with open(args.reasonfile, "rb") as reasonfile:
            reason = reasonfile.read()
    elif args.reason:
        reason = args.reason
    elif args.orphan:
        reason = ORPHAN_REASON
    elif args.orphan_dependent:
        reason = ORPHAN_DEPENDENT_REASON.format(package=args.orphan_dependent)
    elif args.notfound_orphan:
        reason = ORPHAN_NOT_FOUND
    else:
        reasonfile = tempfile.NamedTemporaryFile(delete=False)
        filename = reasonfile.name
        childpid = os.fork()
        if childpid == 0:
            os.execlp("vim", "vim", filename)
        else:
            os.waitpid(childpid, 0)
        reason = reasonfile.read()
        os.unlink(filename)

    date = datetime.datetime.now().strftime("%Y-%m-%d: ")
    if not reason.startswith(date):
        reason = date + reason

    if reason[-1] != "\n":
        reason += "\n"

    errors = {}
    for pkg in args.pkg:
        retired = False
        for branch in args.branch:
            if args.orphan or args.notfound_orphan:
                if not check_status(pkg, branch):
                    print("Skipped pkg '{}' on '{}' because it is not "
                          "orphaned or not retired in one or more checked "
                          "branches".format(pkg, branch))
                    continue
            elif args.orphan_dependent:
                if not check_status(args.orphan_dependent, branch, RETIRED):
                    print("Skipped pkg '{}' on '{}' because "
                          "package '{}' is not retired in one or more checked "
                          "branches".format(
                              pkg, branch, args.orphan_dependent))
                    continue


            for _ in xrange(0, 3):
                try:
                    retire(pkg, branch, reason, dryrun=args.dry_run)
                    retired = True
                    break
                except subprocess.CalledProcessError:
                    pass
            if not retired:
                errors.setdefault(branch, []).append(pkg)

    if errors:
        print("Errors: " + repr(errors))
